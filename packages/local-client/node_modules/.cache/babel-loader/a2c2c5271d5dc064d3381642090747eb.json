{"ast":null,"code":"var _jsxFileName = \"/home/pac/cheatsheets/packages/local-client/src/components/CodeEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport './CodeEditor.css';\nimport './syntax.css';\nimport MonacoEditor from '@monaco-editor/react';\nimport { useRef } from 'react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport jscodeshift from 'jscodeshift';\nimport Highlighter from 'monaco-jsx-highlighter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst clearScreenShortCutPressed = event => {\n  return event.code === 'Enter' && event.ctrlKey === true && event.altKey === true;\n};\n\nconst reformatShortCutPressed = event => {\n  return event.code === 'Enter' && event.ctrlKey === false && event.altKey === true;\n};\n\nconst CodeEditor = ({\n  onChange,\n  initialValue\n}) => {\n  _s();\n\n  const editorRef = useRef(); // Register a listener on editor startup to hook into change events to update our model state\n\n  const editorDidMount = (getValue, editor) => {\n    var _editor$getModel;\n\n    editorRef.current = editor;\n    editor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    editor.onKeyUp(event => {\n      if (clearScreenShortCutPressed(event)) {\n        editorRef.current.setValue('');\n      }\n\n      if (reformatShortCutPressed(event)) {\n        onClickFormat();\n      }\n    });\n    (_editor$getModel = editor.getModel()) === null || _editor$getModel === void 0 ? void 0 : _editor$getModel.updateOptions({\n      tabSize: 2\n    }); // Add custom highlighting for React component specific code\n\n    const highlighter = new Highlighter( // @ts-ignore TS is not aware of the monaco object on the window\n    window.monaco, jscodeshift, editor);\n    highlighter.highLightOnDidChangeModelContent( // add empty error log functions as workaround to fix log clutter while typing\n    () => {}, () => {}, undefined, () => {});\n  };\n\n  const onClickFormat = () => {\n    if (!editorRef.current) {\n      // Do nothing if editor not ready\n      return;\n    }\n\n    const unformattedCode = editorRef.current.getModel().getValue();\n    const formattedCode = prettier.format(unformattedCode, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, ''); // prevent prettier to add trailing newline\n\n    editorRef.current.setValue(formattedCode);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onClickFormat,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: editorDidMount,\n      value: initialValue,\n      theme: \"dark\",\n      language: \"javascript\",\n      height: \"100%\",\n      options: {\n        wordWrap: 'on',\n        useTabStops: false,\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/home/pac/cheatsheets/packages/local-client/src/components/CodeEditor.tsx"],"names":["MonacoEditor","useRef","prettier","parser","jscodeshift","Highlighter","clearScreenShortCutPressed","event","code","ctrlKey","altKey","reformatShortCutPressed","CodeEditor","onChange","initialValue","editorRef","editorDidMount","getValue","editor","current","onDidChangeModelContent","onKeyUp","setValue","onClickFormat","getModel","updateOptions","tabSize","highlighter","window","monaco","highLightOnDidChangeModelContent","undefined","unformattedCode","formattedCode","format","plugins","useTabs","semi","singleQuote","replace","wordWrap","useTabStops","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":"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","sourcesContent":["\nimport './CodeEditor.css';\nimport './syntax.css';\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\nimport { useRef } from 'react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport jscodeshift from 'jscodeshift';\nimport Highlighter from 'monaco-jsx-highlighter';\nimport { IKeyboardEvent } from 'monaco-editor';\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string): void;\n}\n\nconst clearScreenShortCutPressed = (event: IKeyboardEvent): boolean => {\n  return (\n    event.code === 'Enter' && event.ctrlKey === true && event.altKey === true\n  );\n};\n\nconst reformatShortCutPressed = (event: IKeyboardEvent): boolean => {\n  return (\n    event.code === 'Enter' && event.ctrlKey === false && event.altKey === true\n  );\n};\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n  const editorRef = useRef<any>();\n\n  // Register a listener on editor startup to hook into change events to update our model state\n  const editorDidMount: EditorDidMount = (getValue, editor) => {\n    editorRef.current = editor;\n\n    editor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n\n    editor.onKeyUp((event) => {\n      if (clearScreenShortCutPressed(event)) {\n        editorRef.current.setValue('');\n      }\n      if (reformatShortCutPressed(event)) {\n        onClickFormat();\n      }\n    });\n\n    editor.getModel()?.updateOptions({ tabSize: 2 });\n\n    // Add custom highlighting for React component specific code\n    const highlighter = new Highlighter(\n      // @ts-ignore TS is not aware of the monaco object on the window\n      window.monaco,\n      jscodeshift,\n      editor\n    );\n\n    highlighter.highLightOnDidChangeModelContent(\n      // add empty error log functions as workaround to fix log clutter while typing\n      () => {},\n      () => {},\n      undefined,\n      () => {}\n    );\n  };\n\n  const onClickFormat = () => {\n    if (!editorRef.current) {\n      // Do nothing if editor not ready\n      return;\n    }\n\n    const unformattedCode = editorRef.current.getModel().getValue();\n    const formattedCode = prettier\n      .format(unformattedCode, {\n        parser: 'babel',\n        plugins: [parser],\n        useTabs: false,\n        semi: true,\n        singleQuote: true,\n      }) \n      .replace(/\\n$/, ''); // prevent prettier to add trailing newline\n      \n    editorRef.current.setValue(formattedCode);\n  };\n\n  return (\n    <div className=\"editor-wrapper\">\n      <button\n        className=\"button button-format is-primary is-small\"\n        onClick={onClickFormat}\n      >\n        Format\n      </button>\n      <MonacoEditor\n        editorDidMount={editorDidMount}\n        value={initialValue}\n        theme=\"dark\"\n        language=\"javascript\"\n        height=\"100%\"\n        options={{\n          wordWrap: 'on',\n          useTabStops: false,\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}