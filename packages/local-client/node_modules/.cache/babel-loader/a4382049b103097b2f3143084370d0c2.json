{"ast":null,"code":"Prism.languages.scheme = {\n  'comment': /;.*/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n    greedy: true\n  },\n  'symbol': {\n    pattern: /'[^()#'\\s]+/,\n    greedy: true\n  },\n  'character': {\n    pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[-a-zA-Z]+|\\S)/,\n    greedy: true,\n    alias: 'string'\n  },\n  'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n  {\n    pattern: /(\\(lambda\\s+)[^()'\\s]+/,\n    lookbehind: true\n  }, {\n    pattern: /(\\(lambda\\s+\\()[^()']+/,\n    lookbehind: true\n  }],\n  'keyword': {\n    pattern: /(\\()(?:define(?:-library|-macro|-syntax|-values)?|defmacro|(?:case-)?lambda|let(?:(?:\\*|rec)?(?:-values)?|-syntax|rec-syntax)|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-(?:case|rules))(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'builtin': {\n    pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'number': {\n    // This pattern (apart from the lookarounds) works like this:\n    //\n    // Decimal numbers\n    // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n    // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n    // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n    // <dec number>     := <dec prefix>[+-]?<complex>\n    //\n    // Binary, octal, and hexadecimal numbers\n    // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n    // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n    // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n    // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n    //\n    // <number>         := <dec number>|<b.o.x. number>\n    pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'boolean': {\n    pattern: /(^|[\\s()])#[ft](?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'operator': {\n    pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'function': {\n    pattern: /(\\()[^()'\\s]+(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'punctuation': /[()']/\n};","map":{"version":3,"sources":["/home/pac/cheatsheets/packages/local-client/node_modules/prismjs/components/prism-scheme.js"],"names":["Prism","languages","scheme","pattern","greedy","alias","lookbehind"],"mappings":"AAAAA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,GAAyB;AACxB,aAAW,KADa;AAExB,YAAU;AACTC,IAAAA,OAAO,EAAE,mBADA;AAETC,IAAAA,MAAM,EAAE;AAFC,GAFc;AAMxB,YAAU;AACTD,IAAAA,OAAO,EAAE,aADA;AAETC,IAAAA,MAAM,EAAE;AAFC,GANc;AAUxB,eAAa;AACZD,IAAAA,OAAO,EAAE,sCADG;AAEZC,IAAAA,MAAM,EAAE,IAFI;AAGZC,IAAAA,KAAK,EAAE;AAHK,GAVW;AAexB,sBAAoB,CACnB;AACA;AACCF,IAAAA,OAAO,EAAE,wBADV;AAECG,IAAAA,UAAU,EAAE;AAFb,GAFmB,EAMnB;AACCH,IAAAA,OAAO,EAAE,wBADV;AAECG,IAAAA,UAAU,EAAE;AAFb,GANmB,CAfI;AA0BxB,aAAW;AACVH,IAAAA,OAAO,EAAE,+OADC;AAEVG,IAAAA,UAAU,EAAE;AAFF,GA1Ba;AA8BxB,aAAW;AACVH,IAAAA,OAAO,EAAE,2NADC;AAEVG,IAAAA,UAAU,EAAE;AAFF,GA9Ba;AAkCxB,YAAU;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,IAAAA,OAAO,EAAE,sVAhBA;AAiBTG,IAAAA,UAAU,EAAE;AAjBH,GAlCc;AAqDxB,aAAW;AACVH,IAAAA,OAAO,EAAE,6BADC;AAEVG,IAAAA,UAAU,EAAE;AAFF,GArDa;AAyDxB,cAAY;AACXH,IAAAA,OAAO,EAAE,yCADE;AAEXG,IAAAA,UAAU,EAAE;AAFD,GAzDY;AA6DxB,cAAY;AACXH,IAAAA,OAAO,EAAE,2BADE;AAEXG,IAAAA,UAAU,EAAE;AAFD,GA7DY;AAiExB,iBAAe;AAjES,CAAzB","sourcesContent":["Prism.languages.scheme = {\n\t'comment': /;.*/,\n\t'string': {\n\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\tgreedy: true\n\t},\n\t'symbol': {\n\t\tpattern: /'[^()#'\\s]+/,\n\t\tgreedy: true\n\t},\n\t'character': {\n\t\tpattern: /#\\\\(?:[ux][a-fA-F\\d]+|[-a-zA-Z]+|\\S)/,\n\t\tgreedy: true,\n\t\talias: 'string'\n\t},\n\t'lambda-parameter': [\n\t\t// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n\t\t{\n\t\t\tpattern: /(\\(lambda\\s+)[^()'\\s]+/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(lambda\\s+\\()[^()']+/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': {\n\t\tpattern: /(\\()(?:define(?:-library|-macro|-syntax|-values)?|defmacro|(?:case-)?lambda|let(?:(?:\\*|rec)?(?:-values)?|-syntax|rec-syntax)|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-(?:case|rules))(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'builtin': {\n\t\tpattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'number': {\n\t\t// This pattern (apart from the lookarounds) works like this:\n\t\t//\n\t\t// Decimal numbers\n\t\t// <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n\t\t// <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n\t\t// <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n\t\t// <dec number>     := <dec prefix>[+-]?<complex>\n\t\t//\n\t\t// Binary, octal, and hexadecimal numbers\n\t\t// <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n\t\t// <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n\t\t// <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n\t\t// <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n\t\t//\n\t\t// <number>         := <dec number>|<b.o.x. number>\n\t\tpattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'boolean': {\n\t\tpattern: /(^|[\\s()])#[ft](?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'operator': {\n\t\tpattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'function': {\n\t\tpattern: /(\\()[^()'\\s]+(?=[()\\s]|$)/,\n\t\tlookbehind: true\n\t},\n\t'punctuation': /[()']/\n};\n"]},"metadata":{},"sourceType":"script"}