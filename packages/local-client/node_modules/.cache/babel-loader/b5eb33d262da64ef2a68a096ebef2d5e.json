{"ast":null,"code":"var _jsxFileName = \"/home/pac/cheatsheets/packages/local-client/src/components/CodeCell.tsx\",\n    _s = $RefreshSig$();\n\nimport './CodeCell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './CodeEditor';\nimport Preview from './Preview';\nimport Resizable, { Direction } from './Resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { useCumulativeCode } from '../hooks/use-cumulative-code';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = ({\n  cell\n}) => {\n  _s();\n\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  const cumulativeCode = useCumulativeCode(cell.id);\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode);\n    }, 1000);\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }; // disabled warning: adding bundle will lead to an infinite loop so it cannot be placed in the array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.id, cumulativeCode, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: Direction.VERTICAL,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: Direction.HORIZONTAL,\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content || '// Start writing some code and have fun!',\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          bundlingStatus: bundle.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"YdvzI4JhxthmaOjy94Z5IgkoJ60=\", false, function () {\n  return [useActions, useTypedSelector, useCumulativeCode];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/home/pac/cheatsheets/packages/local-client/src/components/CodeCell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","Direction","useActions","useTypedSelector","useCumulativeCode","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","timer","setTimeout","clearTimeout","VERTICAL","height","display","flexDirection","HORIZONTAL","content","value","loading","code","error"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,IAAoBC,SAApB,QAAqC,aAArC;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;;;AAMA,MAAMC,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACtD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BN,UAAU,EAA/C;AACA,QAAMO,MAAM,GAAGN,gBAAgB,CAAEO,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAZ,CAA/B;AACA,QAAMC,cAAc,GAAGT,iBAAiB,CAACE,IAAI,CAACM,EAAN,CAAxC;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACY,MAAL,EAAa;AACXD,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUC,cAAV,CAAZ;AACA;AACD;;AAED,UAAMC,KAAK,GAAGC,UAAU,CAAC,YAAY;AACnCP,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUC,cAAV,CAAZ;AACD,KAFuB,EAErB,IAFqB,CAAxB;AAIA,WAAO,MAAM;AACX,UAAIC,KAAJ,EAAW;AACTE,QAAAA,YAAY,CAACF,KAAD,CAAZ;AACD;AACF,KAJD,CAVc,CAed;AACA;AACD,GAjBQ,EAiBN,CAACR,IAAI,CAACM,EAAN,EAAUC,cAAV,EAA0BL,YAA1B,CAjBM,CAAT;AAmBA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAEP,SAAS,CAACgB,QAAhC;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,mBAAV;AAA+BC,QAAAA,OAAO,EAAE,MAAxC;AAAgDC,QAAAA,aAAa,EAAE;AAA/D,OAAZ;AAAA,8BACE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAEnB,SAAS,CAACoB,UAAhC;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,YAAY,EAAEf,IAAI,CAACgB,OAAL,IAAgB,0CADhC;AAEE,UAAA,QAAQ,EAAGC,KAAD,IAAWhB,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUW,KAAV;AAFjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,kBACI,CAACd,MAAD,IAAWA,MAAM,CAACe,OAAlB,gBACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAAA,iCACE;AAAU,YAAA,SAAS,EAAC,8BAApB;AAAmD,YAAA,GAAG,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,gBAOA,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEf,MAAM,CAACgB,IAAtB;AAA4B,UAAA,cAAc,EAAEhB,MAAM,CAACiB;AAAnD;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CA/CD;;GAAMrB,Q;UACiCH,U,EACtBC,gB,EACQC,iB;;;KAHnBC,Q;AAiDN,eAAeA,QAAf","sourcesContent":["import './CodeCell.css';\nimport { useEffect } from 'react';\nimport CodeEditor from './CodeEditor';\nimport Preview from './Preview';\nimport Resizable, { Direction } from './Resizable';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { useCumulativeCode } from '../hooks/use-cumulative-code';\n\ninterface CodeCellProps {\n  cell: Cell;\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell, createBundle } = useActions();\n  const bundle = useTypedSelector((state) => state.bundles[cell.id]);\n  const cumulativeCode = useCumulativeCode(cell.id);\n\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode);\n    }, 1000);\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n    // disabled warning: adding bundle will lead to an infinite loop so it cannot be placed in the array\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cell.id, cumulativeCode, createBundle]);\n\n  return (\n    <Resizable direction={Direction.VERTICAL}>\n      <div style={{ height: 'calc(100% - 10px)', display: 'flex', flexDirection: 'row' }}>\n        <Resizable direction={Direction.HORIZONTAL}>\n          <CodeEditor\n            initialValue={cell.content || '// Start writing some code and have fun!'}\n            onChange={(value) => updateCell(cell.id, value)}\n          />\n        </Resizable>\n        <div className='progress-wrapper'>\n          { !bundle || bundle.loading ? (\n              <div className='progress-bar'>\n                <progress className='progress is-small is-primary' max='100'>\n                  Loading\n                </progress>\n              </div>     \n          ) : (\n            <Preview code={bundle.code} bundlingStatus={bundle.error} />\n          )}\n        </div>\n      </div>\n    </Resizable>\n  );\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}