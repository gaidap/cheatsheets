{"ast":null,"code":"var _jsxFileName = \"/home/pac/cheatsheets/packages/local-client/src/components/Preview.tsx\",\n    _s = $RefreshSig$();\n\nimport './Preview.css';\nimport { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Generate html document locally to prevent an unnecessary request to fetch the html for the iFrame\nconst htmlContent = `\n<html>\n  <head>\n    <style>html { background-color: antiquewhite; }</style>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script>\n      const handleError = (error) => {\n        const root = document.querySelector('#root');\n        root.innerHTML = '<div style=\"color: red;\">' + error + '</div>';\n        console.error(error); // bubble up error to console\n      };\n      \n      window.addEventListener('error', (event) => {\n        event.preventDefault();\n        handleError(event.error);\n      });  \n\n      window.addEventListener('message', (event) => {\n        try {\n          eval(event.data);\n        } catch (error) {\n          handleError(error);\n        }\n      }, false);\n    </script>\n  </body>\n</html>\n`;\n\nconst Preview = ({\n  code,\n  bundlingStatus\n}) => {\n  _s();\n\n  const iframeRef = useRef();\n  useEffect(() => {\n    // reset the iFrame properly before exexuting user code\n    iframeRef.current.srcdoc = htmlContent; // Prevent flickering of iFrame if user is tempering with the innerHTML of the iFrame\n    // Otherwise the users input would not be displayed on the preview\n\n    setTimeout(() => {\n      // update content in iFrame\n      iframeRef.current.contentWindow.postMessage(code, '*');\n    }, 50);\n  }, [code]); // set sandbox to empty string as workaround to isolate code execution in the iFrame\n  // the downside is that the user code cannot use local storage or cookies etc.\n  // the upside is it is fast and extremly simple since we do not need more infrastructure\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n      ref: iframeRef,\n      title: \"code-sandbox-preview\",\n      sandbox: \"allow-scripts\",\n      srcDoc: htmlContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), bundlingStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"preview-error\",\n      children: bundlingStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Preview, \"xrPm9S+7ob9FwtLVsZjNguOLSgs=\");\n\n_c = Preview;\nexport default Preview;\n\nvar _c;\n\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"sources":["/home/pac/cheatsheets/packages/local-client/src/components/Preview.tsx"],"names":["useEffect","useRef","htmlContent","Preview","code","bundlingStatus","iframeRef","current","srcdoc","setTimeout","contentWindow","postMessage"],"mappings":";;;AAAA,OAAO,eAAP;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAOA;AACA,MAAMC,WAAW,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BA;;AA+BA,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8B;AAAA;;AACpE,QAAMC,SAAS,GAAGL,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAM,IAAAA,SAAS,CAACC,OAAV,CAAkBC,MAAlB,GAA2BN,WAA3B,CAFc,CAId;AACA;;AACAO,IAAAA,UAAU,CAAC,MAAM;AACf;AACAH,MAAAA,SAAS,CAACC,OAAV,CAAkBG,aAAlB,CAAgCC,WAAhC,CAA4CP,IAA5C,EAAkD,GAAlD;AACD,KAHS,EAGP,EAHO,CAAV;AAID,GAVQ,EAUN,CAACA,IAAD,CAVM,CAAT,CAHoE,CAepE;AACA;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE;AACE,MAAA,GAAG,EAAEE,SADP;AAEE,MAAA,KAAK,EAAC,sBAFR;AAGE,MAAA,OAAO,EAAC,eAHV;AAIE,MAAA,MAAM,EAAEJ;AAJV;AAAA;AAAA;AAAA;AAAA,YADF,EAOGG,cAAc,iBAAI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,YAPrB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA7BD;;GAAMF,O;;KAAAA,O;AA+BN,eAAeA,OAAf","sourcesContent":["import './Preview.css';\nimport { useEffect, useRef } from 'react';\n\ninterface PreviewProps {\n  code: string;\n  bundlingStatus: string;\n}\n\n// Generate html document locally to prevent an unnecessary request to fetch the html for the iFrame\nconst htmlContent = `\n<html>\n  <head>\n    <style>html { background-color: antiquewhite; }</style>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script>\n      const handleError = (error) => {\n        const root = document.querySelector('#root');\n        root.innerHTML = '<div style=\"color: red;\">' + error + '</div>';\n        console.error(error); // bubble up error to console\n      };\n      \n      window.addEventListener('error', (event) => {\n        event.preventDefault();\n        handleError(event.error);\n      });  \n\n      window.addEventListener('message', (event) => {\n        try {\n          eval(event.data);\n        } catch (error) {\n          handleError(error);\n        }\n      }, false);\n    </script>\n  </body>\n</html>\n`;\n\nconst Preview: React.FC<PreviewProps> = ({ code, bundlingStatus }) => {\n  const iframeRef = useRef<any>();\n\n  useEffect(() => {\n    // reset the iFrame properly before exexuting user code\n    iframeRef.current.srcdoc = htmlContent;\n\n    // Prevent flickering of iFrame if user is tempering with the innerHTML of the iFrame\n    // Otherwise the users input would not be displayed on the preview\n    setTimeout(() => {\n      // update content in iFrame\n      iframeRef.current.contentWindow.postMessage(code, '*');\n    }, 50);\n  }, [code]);\n\n  // set sandbox to empty string as workaround to isolate code execution in the iFrame\n  // the downside is that the user code cannot use local storage or cookies etc.\n  // the upside is it is fast and extremly simple since we do not need more infrastructure\n  return (\n    <div className=\"preview-wrapper\">\n      <iframe\n        ref={iframeRef}\n        title=\"code-sandbox-preview\"\n        sandbox=\"allow-scripts\"\n        srcDoc={htmlContent}\n      />\n      {bundlingStatus && <div className=\"preview-error\">{bundlingStatus}</div>}\n    </div>\n  );\n};\n\nexport default Preview;\n"]},"metadata":{},"sourceType":"module"}