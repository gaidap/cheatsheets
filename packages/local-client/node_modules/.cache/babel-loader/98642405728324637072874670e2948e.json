{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport classnames from 'classnames';\nimport \"./index.css\";\nexport default function Toolbar() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var prefixCls = props.prefixCls,\n      _props$commands = props.commands,\n      commands = _props$commands === void 0 ? [] : _props$commands,\n      active = props.active;\n\n  function handleClick(command) {\n    var onCommand = props.onCommand;\n    onCommand && onCommand(command);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-toolbar\")\n  }, /*#__PURE__*/React.createElement(\"ul\", null, commands.map(function (item, idx) {\n    if (item.keyCommand === 'divider') {\n      return /*#__PURE__*/React.createElement(\"li\", _extends({\n        key: idx\n      }, item.liProps, {\n        className: \"\".concat(prefixCls, \"-toolbar-divider\")\n      }));\n    }\n\n    var activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]);\n    return /*#__PURE__*/React.createElement(\"li\", _extends({\n      key: idx\n    }, item.liProps, {\n      className: classnames({\n        active: activeBtn\n      })\n    }), !item.buttonProps && item.icon, item.buttonProps && /*#__PURE__*/React.createElement('button', _objectSpread(_objectSpread({\n      type: 'button',\n      disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),\n      \"data-name\": item.name\n    }, item.buttonProps), {}, {\n      onClick: function onClick() {\n        return handleClick(item);\n      }\n    }), item.icon));\n  })));\n}\n;","map":{"version":3,"sources":["../../../../src/components/Toolbar/index.tsx"],"names":["props","prefixCls","commands","active","onCommand","item","idx","activeBtn","classnames","type","disabled","name","onClick","handleClick"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAGA,OAAA,aAAA;AAUA,eAAe,SAAA,OAAA,GAA4C;AAAA,MAA3BA,KAA2B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,MACjDC,SADiD,GACZD,KADY,CAAA,SAAA;AAAA,MAAA,eAAA,GACZA,KADY,CAAA,QAAA;AAAA,MACtCE,QADsC,GAAA,eAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,eAAA;AAAA,MACvBC,MADuB,GACZH,KADY,CAAA,MAAA;;AAEzD,WAAA,WAAA,CAAA,OAAA,EAAwC;AAAA,QAC9BI,SAD8B,GAChBJ,KADgB,CAAA,SAAA;AAEtCI,IAAAA,SAAS,IAAIA,SAAS,CAAtBA,OAAsB,CAAtBA;AACD;;AACD,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA;AAAd,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACG,QAAQ,CAAR,GAAA,CAAa,UAAA,IAAA,EAAA,GAAA,EAAe;AAC3B,QAAIC,IAAI,CAAJA,UAAAA,KAAJ,SAAA,EAAmC;AACjC,aAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAI,QAAA,GAAG,EAAEC;AAAT,OAAA,EAAkBD,IAAI,CAAtB,OAAA,EAAA;AAAgC,QAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,kBAAA;AAAzC,OAAA,CAAA,CAAP;AACD;;AACD,QAAME,SAAS,GAAGJ,MAAM,KAAKE,IAAI,CAAJA,KAAAA,GAAaF,MAAM,CAACE,IAAI,CAAXF,UAAM,CAANA,IAA2BA,MAAM,CAACE,IAAI,CAAXF,UAAM,CAANA,KAA4BE,IAAI,CAAxEA,KAAAA,GAAiFF,MAAM,CAACE,IAAI,CAAzH,UAAoH,CAA5F,CAAxB;AACA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAI,MAAA,GAAG,EAAEC;AAAT,KAAA,EAAkBD,IAAI,CAAtB,OAAA,EAAA;AAAgC,MAAA,SAAS,EAAEG,UAAU,CAAC;AAAEL,QAAAA,MAAM,EAAEI;AAAV,OAAD;AAArD,KAAA,CAAA,EACG,CAACF,IAAI,CAAL,WAAA,IAAqBA,IAAI,CAD5B,IAAA,EAEGA,IAAI,CAAJA,WAAAA,IAAAA,aAAoB,KAAK,CAAL,aAAA,CAAA,QAAA,EAAA,aAAA,CAAA,aAAA,CAAA;AACnBI,MAAAA,IAAI,EADe,QAAA;AAEnBC,MAAAA,QAAQ,EAAEP,MAAM,IAAIA,MAAM,CAAhBA,OAAAA,IAA4BA,MAAM,CAANA,OAAAA,KAA5BA,SAAAA,IAA4D,CAAC,uBAAA,IAAA,CAA4BE,IAAI,CAFpF,UAEoD,CAFpD;AAGnB,mBAAaA,IAAI,CAACM;AAHC,KAAA,EAGQN,IAAI,CAHZ,WAAA,CAAA,EAAA,EAAA,EAAA;AAInBO,MAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,eAAOC,WAAW,CAAlB,IAAkB,CAAlB;AAAA;AAJU,KAAA,CAAA,EAKlBR,IAAI,CARX,IAGyB,CAFvB,CADF;AARR,GAGO,CADH,CADF,CADF;AAuBD;AAAA","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { IProps } from '../../utils';\nimport { ICommand } from '../../commands';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  onCommand?: (command: ICommand) => void;\n  commands?: ICommand[];\n  active?: {\n    [key: string]: any,\n  },\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls, commands = [], active } = props;\n  function handleClick(command: ICommand) {\n    const { onCommand } = props;\n    onCommand && onCommand(command);\n  }\n  return (\n    <div className={`${prefixCls}-toolbar`}>\n      <ul>\n        {commands.map((item, idx) => {\n          if (item.keyCommand === 'divider') {\n            return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />\n          }\n          const activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]); \n          return (\n            <li key={idx} {...item.liProps} className={classnames({ active: activeBtn })}>\n              {!item.buttonProps && item.icon}\n              {item.buttonProps && React.createElement('button', {\n                type: 'button',\n                disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),\n                \"data-name\": item.name, ...item.buttonProps,\n                onClick: () =>  handleClick(item)\n              }, item.icon)}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}