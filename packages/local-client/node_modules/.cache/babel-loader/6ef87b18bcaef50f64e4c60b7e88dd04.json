{"ast":null,"code":"var _jsxFileName = \"/home/pac/cheatsheets/packages/local-client/src/components/Resizable.tsx\",\n    _s = $RefreshSig$();\n\nimport './Resizable.css';\nimport { useState, useEffect } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let Direction;\n\n(function (Direction) {\n  Direction[\"HORIZONTAL\"] = \"horizontal\";\n  Direction[\"VERTICAL\"] = \"vertical\";\n})(Direction || (Direction = {}));\n\nconst Resizable = ({\n  direction,\n  children\n}) => {\n  _s();\n\n  const [innerHeight, setInnerHeight] = useState(window.innerHeight);\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth);\n  const [width, setWidth] = useState(window.innerWidth * 0.75); // set initial width to 75 % of window inner width\n\n  useEffect(() => {\n    let timer; // use debouncing to improve resize performance\n\n    const listener = () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      timer = setTimeout(() => {\n        setInnerHeight(window.innerHeight);\n        setInnerWidth(window.innerWidth); // Solution for ResizableBox bug that ignores maxConstraints if width was set directly\n\n        const editorMaxWidth = window.innerWidth * 0.75;\n\n        if (editorMaxWidth < width) {\n          setWidth(editorMaxWidth);\n        }\n      }, 100);\n    };\n\n    window.addEventListener('resize', listener); // return clean up funcion to deregister from event the next time width was updated\n\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  }, [width]);\n  let resizableProps;\n\n  if (direction === Direction.HORIZONTAL) {\n    resizableProps = {\n      className: 'resize-horizontal',\n      minConstraints: [innerWidth * 0.2, Infinity],\n      maxConstraints: [innerWidth * 0.75, Infinity],\n      height: Infinity,\n      width: width,\n      resizeHandles: ['e'],\n      onResizeStop: (_event, data) => {\n        setWidth(data.size.width);\n      }\n    };\n  } else {\n    resizableProps = {\n      minConstraints: [Infinity, innerHeight * 0.05],\n      maxConstraints: [Infinity, innerHeight * 0.9],\n      height: 300,\n      width: Infinity,\n      resizeHandles: ['s']\n    };\n  }\n\n  return (\n    /*#__PURE__*/\n    // Infinity for width works analog to \"100%\"\n    _jsxDEV(ResizableBox, { ...resizableProps,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Resizable, \"m+WxLgYILcvcZeed5BdA/O/PzMM=\");\n\n_c = Resizable;\nexport default Resizable;\n\nvar _c;\n\n$RefreshReg$(_c, \"Resizable\");","map":{"version":3,"sources":["/home/pac/cheatsheets/packages/local-client/src/components/Resizable.tsx"],"names":["useState","useEffect","ResizableBox","Direction","Resizable","direction","children","innerHeight","setInnerHeight","window","innerWidth","setInnerWidth","width","setWidth","timer","listener","clearTimeout","setTimeout","editorMaxWidth","addEventListener","removeEventListener","resizableProps","HORIZONTAL","className","minConstraints","Infinity","maxConstraints","height","resizeHandles","onResizeStop","_event","data","size"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAAgD,iBAAhD;;AAEA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AASZ,MAAMC,SAAmC,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA6B;AAAA;;AACvE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAACS,MAAM,CAACF,WAAR,CAA9C;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAACS,MAAM,CAACC,UAAR,CAA5C;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACS,MAAM,CAACC,UAAP,GAAoB,IAArB,CAAlC,CAHuE,CAGT;;AAE9DT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,KAAJ,CADc,CAGd;;AACA,UAAMC,QAAQ,GAAG,MAAM;AACrB,UAAID,KAAJ,EAAW;AACTE,QAAAA,YAAY,CAACF,KAAD,CAAZ;AACD;;AACDA,MAAAA,KAAK,GAAGG,UAAU,CAAC,MAAM;AACvBT,QAAAA,cAAc,CAACC,MAAM,CAACF,WAAR,CAAd;AACAI,QAAAA,aAAa,CAACF,MAAM,CAACC,UAAR,CAAb,CAFuB,CAIvB;;AACA,cAAMQ,cAAc,GAAGT,MAAM,CAACC,UAAP,GAAoB,IAA3C;;AACA,YAAIQ,cAAc,GAAGN,KAArB,EAA4B;AAC1BC,UAAAA,QAAQ,CAACK,cAAD,CAAR;AACD;AACF,OATiB,EASf,GATe,CAAlB;AAUD,KAdD;;AAeAT,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCJ,QAAlC,EAnBc,CAqBd;;AACA,WAAO,MAAM;AACXN,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCL,QAArC;AACD,KAFD;AAGD,GAzBQ,EAyBN,CAACH,KAAD,CAzBM,CAAT;AA2BA,MAAIS,cAAJ;;AACA,MAAIhB,SAAS,KAAKF,SAAS,CAACmB,UAA5B,EAAwC;AACtCD,IAAAA,cAAc,GAAG;AACfE,MAAAA,SAAS,EAAE,mBADI;AAEfC,MAAAA,cAAc,EAAE,CAACd,UAAU,GAAG,GAAd,EAAmBe,QAAnB,CAFD;AAGfC,MAAAA,cAAc,EAAE,CAAChB,UAAU,GAAG,IAAd,EAAoBe,QAApB,CAHD;AAIfE,MAAAA,MAAM,EAAEF,QAJO;AAKfb,MAAAA,KAAK,EAAEA,KALQ;AAMfgB,MAAAA,aAAa,EAAE,CAAC,GAAD,CANA;AAOfC,MAAAA,YAAY,EAAE,CAACC,MAAD,EAASC,IAAT,KAAkB;AAC9BlB,QAAAA,QAAQ,CAACkB,IAAI,CAACC,IAAL,CAAUpB,KAAX,CAAR;AACD;AATc,KAAjB;AAWD,GAZD,MAYO;AACLS,IAAAA,cAAc,GAAG;AACfG,MAAAA,cAAc,EAAE,CAACC,QAAD,EAAWlB,WAAW,GAAG,IAAzB,CADD;AAEfmB,MAAAA,cAAc,EAAE,CAACD,QAAD,EAAWlB,WAAW,GAAG,GAAzB,CAFD;AAGfoB,MAAAA,MAAM,EAAE,GAHO;AAIff,MAAAA,KAAK,EAAEa,QAJQ;AAKfG,MAAAA,aAAa,EAAE,CAAC,GAAD;AALA,KAAjB;AAOD;;AACD;AAAA;AACE;AACA,YAAC,YAAD,OAAkBP,cAAlB;AAAA,gBAAmCf;AAAnC;AAAA;AAAA;AAAA;AAAA;AAFF;AAID,CA1DD;;GAAMF,S;;KAAAA,S;AA4DN,eAAeA,SAAf","sourcesContent":["import './Resizable.css';\nimport { useState, useEffect } from 'react';\nimport { ResizableBox, ResizableBoxProps } from 'react-resizable';\n\nexport enum Direction {\n  HORIZONTAL = 'horizontal',\n  VERTICAL = 'vertical',\n}\n\ninterface ResizableProps {\n  direction: Direction;\n}\n\nconst Resizable: React.FC<ResizableProps> = ({ direction, children }) => {\n  const [innerHeight, setInnerHeight] = useState(window.innerHeight);\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth);\n  const [width, setWidth] = useState(window.innerWidth * 0.75); // set initial width to 75 % of window inner width\n\n  useEffect(() => {\n    let timer: any;\n\n    // use debouncing to improve resize performance\n    const listener = () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      timer = setTimeout(() => {\n        setInnerHeight(window.innerHeight);\n        setInnerWidth(window.innerWidth);\n\n        // Solution for ResizableBox bug that ignores maxConstraints if width was set directly\n        const editorMaxWidth = window.innerWidth * 0.75;\n        if (editorMaxWidth < width) {\n          setWidth(editorMaxWidth);\n        }\n      }, 100);\n    };\n    window.addEventListener('resize', listener);\n\n    // return clean up funcion to deregister from event the next time width was updated\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  }, [width]);\n\n  let resizableProps: ResizableBoxProps;\n  if (direction === Direction.HORIZONTAL) {\n    resizableProps = {\n      className: 'resize-horizontal',\n      minConstraints: [innerWidth * 0.2, Infinity],\n      maxConstraints: [innerWidth * 0.75, Infinity],\n      height: Infinity,\n      width: width,\n      resizeHandles: ['e'],\n      onResizeStop: (_event, data) => {\n        setWidth(data.size.width);\n      },\n    };\n  } else {\n    resizableProps = {\n      minConstraints: [Infinity, innerHeight * 0.05],\n      maxConstraints: [Infinity, innerHeight * 0.9],\n      height: 300,\n      width: Infinity,\n      resizeHandles: ['s'],\n    };\n  }\n  return (\n    // Infinity for width works analog to \"100%\"\n    <ResizableBox {...resizableProps}>{children}</ResizableBox>\n  );\n};\n\nexport default Resizable;\n\n\n"]},"metadata":{},"sourceType":"module"}