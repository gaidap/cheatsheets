{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { CellType } from '../state';\nimport { useTypedSelector } from './use-typed-selector'; // Add build in preview function to help user render stuff to the preview area\n\nconst previewFn = `\nimport __React__ from 'react';\nimport __ReactDOM__ from 'react-dom';\nvar preview = (value) => {\n  const root = document.querySelector('#root');\n  if(value && value.$$typeof && value.props) {\n    __ReactDOM__.render(value, root);\n  } else if(typeof value === 'object') {\n    root.innerHTML = JSON.stringify(value, null, 2);\n  } else {\n    root.innerHTML = value;\n  }\n};\n`; // Override the preview funtion with no-op version to prevent calls in subsequent cells\n\nconst previewFnNoOp = 'var preview = () => {};';\nexport const useCumulativeCode = cellId => {\n  _s();\n\n  return useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const result = [];\n\n    for (let currentCell of orderedCells) {\n      if (currentCell.type === CellType.CODE) {\n        if (currentCell.id === cellId) {\n          result.push(previewFn);\n        } else {\n          result.push(previewFnNoOp);\n        }\n\n        result.push(currentCell.content);\n      }\n\n      if (currentCell.id === cellId) {\n        break;\n      }\n    }\n\n    return result;\n  }).join('\\n');\n};\n\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["/home/pac/cheatsheets/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["CellType","useTypedSelector","previewFn","previewFnNoOp","useCumulativeCode","cellId","state","data","order","cells","orderedCells","map","id","result","currentCell","type","CODE","push","content","join"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,gBAAT,QAAiC,sBAAjC,C,CAEA;;AACA,MAAMC,SAAS,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA,C,CAcA;;AACA,MAAMC,aAAa,GAAG,yBAAtB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AACnD,SAAOJ,gBAAgB,CAAEK,KAAD,IAAW;AACjC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,KAA9B;AACA,UAAMC,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAWC,EAAD,IAAQL,IAAI,CAACK,EAAD,CAAtB,CAArB;AACA,UAAMC,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,WAAT,IAAwBJ,YAAxB,EAAsC;AACpC,UAAII,WAAW,CAACC,IAAZ,KAAqBf,QAAQ,CAACgB,IAAlC,EAAwC;AACtC,YAAIF,WAAW,CAACF,EAAZ,KAAmBP,MAAvB,EAA+B;AAC7BQ,UAAAA,MAAM,CAACI,IAAP,CAAYf,SAAZ;AACD,SAFD,MAEO;AACLW,UAAAA,MAAM,CAACI,IAAP,CAAYd,aAAZ;AACD;;AACDU,QAAAA,MAAM,CAACI,IAAP,CAAYH,WAAW,CAACI,OAAxB;AACD;;AACD,UAAIJ,WAAW,CAACF,EAAZ,KAAmBP,MAAvB,EAA+B;AAC7B;AACD;AACF;;AACD,WAAOQ,MAAP;AACD,GAlBsB,CAAhB,CAkBJM,IAlBI,CAkBC,IAlBD,CAAP;AAmBD,CApBM;;GAAMf,iB;UACJH,gB","sourcesContent":["import { CellType } from '../state';\nimport { useTypedSelector } from './use-typed-selector';\n\n// Add build in preview function to help user render stuff to the preview area\nconst previewFn = `\nimport __React__ from 'react';\nimport __ReactDOM__ from 'react-dom';\nvar preview = (value) => {\n  const root = document.querySelector('#root');\n  if(value && value.$$typeof && value.props) {\n    __ReactDOM__.render(value, root);\n  } else if(typeof value === 'object') {\n    root.innerHTML = JSON.stringify(value, null, 2);\n  } else {\n    root.innerHTML = value;\n  }\n};\n`;\n// Override the preview funtion with no-op version to prevent calls in subsequent cells\nconst previewFnNoOp = 'var preview = () => {};';\n\nexport const useCumulativeCode = (cellId: string) => {\n  return useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n    const result = [];\n    for (let currentCell of orderedCells) {\n      if (currentCell.type === CellType.CODE) {\n        if (currentCell.id === cellId) {\n          result.push(previewFn);\n        } else {\n          result.push(previewFnNoOp);\n        }\n        result.push(currentCell.content);\n      }\n      if (currentCell.id === cellId) {\n        break;\n      }\n    }\n    return result;\n  }).join('\\n');\n};\n"]},"metadata":{},"sourceType":"module"}