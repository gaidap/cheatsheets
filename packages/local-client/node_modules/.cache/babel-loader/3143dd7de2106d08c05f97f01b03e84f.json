{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport React from 'react';\nimport classnames from 'classnames';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator } from './commands';\nimport \"./index.css\";\n\nvar MDEditor = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(MDEditor, _React$PureComponent);\n\n  var _super = _createSuper(MDEditor);\n\n  function MDEditor(props) {\n    var _this;\n\n    _classCallCheck(this, MDEditor);\n\n    _this = _super.call(this, props);\n    _this.preview = /*#__PURE__*/React.createRef();\n    _this.textarea = /*#__PURE__*/React.createRef();\n    _this.commandOrchestrator = void 0;\n    _this.leftScroll = false;\n\n    _this.handleScroll = function (e) {\n      if (!_this.textarea.current || !_this.preview.current || !_this.preview.current.mdp || !_this.textarea.current.warp) {\n        return;\n      }\n\n      var preview = _this.preview.current.mdp.current;\n      var textarea = _this.textarea.current.warp.current;\n\n      if (textarea && preview) {\n        var scale = (textarea.scrollHeight - textarea.offsetHeight) / (preview.scrollHeight - preview.offsetHeight);\n\n        if (e.target === textarea && _this.leftScroll) {\n          preview.scrollTop = textarea.scrollTop / scale;\n        }\n\n        if (e.target === preview && !_this.leftScroll) {\n          textarea.scrollTop = preview.scrollTop * scale;\n        }\n      }\n    };\n\n    _this.handleCommand = function (command) {\n      if (command.keyCommand === 'preview') {\n        _this.setState({\n          preview: command.value\n        });\n      }\n\n      if (command.keyCommand === 'fullscreen') {\n        _this.setState({\n          fullscreen: !_this.state.fullscreen\n        });\n\n        document.body.style.overflow = _this.state.fullscreen ? 'initial' : 'hidden';\n      }\n\n      _this.commandOrchestrator.executeCommand(command);\n    };\n\n    _this.state = {\n      height: props.height,\n      preview: props.preview,\n      fullscreen: props.fullscreen,\n      value: props.value\n    };\n    return _this;\n  }\n\n  _createClass(MDEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleChange(this.state.value);\n      this.commandOrchestrator = new TextAreaCommandOrchestrator(this.textarea.current.text.current || null);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var _this2 = this;\n\n      if (nextProps.preview !== this.props.preview) {\n        this.setState({\n          preview: nextProps.preview\n        });\n      }\n\n      if (nextProps.fullscreen !== this.props.fullscreen) {\n        this.setState({\n          fullscreen: nextProps.fullscreen\n        });\n      }\n\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          value: nextProps.value\n        }, function () {\n          _this2.handleChange(nextProps.value);\n        });\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(mdStr) {\n      var onChange = this.props.onChange;\n      this.preview.current.renderHTML(mdStr);\n      onChange && onChange(mdStr || '');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classnames,\n          _this3 = this;\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          value = _this$props.value,\n          commands = _this$props.commands,\n          height = _this$props.height,\n          visiableDragbar = _this$props.visiableDragbar,\n          preview = _this$props.preview,\n          fullscreen = _this$props.fullscreen,\n          previewOptions = _this$props.previewOptions,\n          textareaProps = _this$props.textareaProps,\n          maxHeight = _this$props.maxHeight,\n          minHeight = _this$props.minHeight,\n          autoFocus = _this$props.autoFocus,\n          tabSize = _this$props.tabSize,\n          onChange = _this$props.onChange,\n          hideToolbar = _this$props.hideToolbar,\n          other = _objectWithoutProperties(_this$props, [\"prefixCls\", \"className\", \"value\", \"commands\", \"height\", \"visiableDragbar\", \"preview\", \"fullscreen\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"onChange\", \"hideToolbar\"]);\n\n      var cls = classnames(className, prefixCls, (_classnames = {}, _defineProperty(_classnames, \"\".concat(prefixCls, \"-show-\").concat(this.state.preview), this.state.preview), _defineProperty(_classnames, \"\".concat(prefixCls, \"-fullscreen\"), this.state.fullscreen), _classnames));\n      return /*#__PURE__*/React.createElement(\"div\", _extends({\n        className: cls,\n        style: {\n          height: this.state.fullscreen ? '100%' : this.state.height\n        }\n      }, other), !hideToolbar && /*#__PURE__*/React.createElement(Toolbar, {\n        active: {\n          fullscreen: this.state.fullscreen,\n          preview: this.state.preview\n        },\n        prefixCls: prefixCls,\n        commands: commands,\n        onCommand: this.handleCommand\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-content\"),\n        style: {\n          height: this.state.fullscreen ? 'calc(100% - 29px)' : this.state.height - 29\n        }\n      }, /(edit|live)/.test(this.state.preview) && /*#__PURE__*/React.createElement(TextArea, _extends({\n        ref: this.textarea,\n        tabSize: tabSize,\n        className: \"\".concat(prefixCls, \"-input\"),\n        prefixCls: prefixCls,\n        value: this.state.value,\n        autoFocus: autoFocus\n      }, textareaProps, {\n        onScroll: this.handleScroll,\n        onMouseOver: function onMouseOver() {\n          return _this3.leftScroll = true;\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _this3.leftScroll = false;\n        },\n        onChange: this.handleChange.bind(this)\n      })), /*#__PURE__*/React.createElement(MarkdownPreview, _extends({}, previewOptions, {\n        ref: this.preview,\n        onScroll: this.handleScroll,\n        className: \"\".concat(prefixCls, \"-preview\")\n      })), visiableDragbar && this.state.preview !== 'preview' && !this.state.fullscreen && /*#__PURE__*/React.createElement(DragBar, {\n        prefixCls: prefixCls,\n        height: this.state.height,\n        maxHeight: maxHeight,\n        minHeight: minHeight,\n        onChange: function onChange(newHeight) {\n          _this3.setState({\n            height: newHeight\n          });\n        }\n      })));\n    }\n  }]);\n\n  return MDEditor;\n}(React.PureComponent);\n\nMDEditor.Markdown = MarkdownPreview;\nMDEditor.displayName = 'MDEditor';\nMDEditor.defaultProps = {\n  value: '',\n  prefixCls: 'w-md-editor',\n  height: 200,\n  minHeight: 100,\n  maxHeight: 1200,\n  tabSize: 2,\n  visiableDragbar: true,\n  preview: 'live',\n  fullscreen: false,\n  commands: getCommands()\n};\nexport { MDEditor as default };","map":{"version":3,"sources":["../../src/MDEditor.tsx"],"names":["MDEditor","React","PureComponent","Markdown","MarkdownPreview","displayName","preview","textarea","commandOrchestrator","leftScroll","defaultProps","value","prefixCls","height","minHeight","maxHeight","tabSize","visiableDragbar","fullscreen","commands","getCommands","props","nextProps","scale","e","mdStr","onChange","command","document","className","previewOptions","textareaProps","autoFocus","hideToolbar","other","cls","classnames","handleCommand","newHeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { ReactMarkdownProps } from 'react-markdown';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand, CommandOrchestrator } from './commands';\nimport './index.less';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: 'live' | 'edit' | 'preview';\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: ReactMarkdownProps;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n}\n\nexport interface MDEditorState {\n  height: React.CSSProperties['height'];\n  preview?: MDEditorProps['preview'];\n  fullscreen?: boolean;\n  value?: string;\n}\n\nexport default class MDEditor extends React.PureComponent<MDEditorProps, MDEditorState> {\n  static Markdown = MarkdownPreview;\n  public static displayName = 'MDEditor';\n  public preview = React.createRef<MarkdownPreview>();\n  public textarea = React.createRef<TextArea>();\n  public commandOrchestrator!: CommandOrchestrator;\n  public leftScroll:boolean = false;\n  public static defaultProps: MDEditorProps = {\n    value: '',\n    prefixCls: 'w-md-editor',\n    height: 200,\n    minHeight: 100,\n    maxHeight: 1200,\n    tabSize: 2,\n    visiableDragbar: true,\n    preview: 'live',\n    fullscreen: false,\n    commands: getCommands(),\n  }\n  public constructor(props: MDEditorProps) {\n    super(props);\n    this.state = {\n      height: props.height,\n      preview: props.preview,\n      fullscreen: props.fullscreen,\n      value: props.value,\n    };\n  }\n  public componentDidMount() {\n    this.handleChange(this.state.value);\n    this.commandOrchestrator = new TextAreaCommandOrchestrator((this.textarea.current!.text.current || null) as HTMLTextAreaElement);\n  }\n  public UNSAFE_componentWillReceiveProps(nextProps: MDEditorProps) {\n    if (nextProps.preview !== this.props.preview) {\n      this.setState({ preview: nextProps.preview });\n    }\n    if (nextProps.fullscreen !== this.props.fullscreen) {\n      this.setState({ fullscreen: nextProps.fullscreen });\n    }\n    if (nextProps.value !== this.props.value) {\n      this.setState({ value: nextProps.value }, () => {\n        this.handleChange(nextProps.value);\n      });\n    }\n  }\n  private handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    if (!this.textarea.current || !this.preview.current || !this.preview.current.mdp || !this.textarea.current.warp) {\n      return;\n    }\n    const preview = this.preview.current.mdp.current! as HTMLDivElement;\n    const textarea = this.textarea.current.warp.current! as HTMLDivElement;\n    if (textarea && preview) {\n      const scale = (textarea.scrollHeight - textarea.offsetHeight) / (preview.scrollHeight - preview.offsetHeight);\n      if (e.target === textarea && this.leftScroll) {\n        preview.scrollTop = textarea.scrollTop / scale;\n      }\n      if (e.target === preview && !this.leftScroll) {\n        textarea.scrollTop = preview.scrollTop * scale;\n      }\n    }\n  }\n  private handleChange(mdStr?: string) {\n    const { onChange } = this.props;\n    this.preview.current!.renderHTML(mdStr);\n    onChange && onChange(mdStr || '');\n  }\n  public handleCommand = (command: ICommand) => {\n    if (command.keyCommand === 'preview') {\n      this.setState({ preview: command.value as MDEditorState['preview'] });\n    }\n    if (command.keyCommand === 'fullscreen') {\n      this.setState({ fullscreen: !this.state.fullscreen });\n      document.body.style.overflow = this.state.fullscreen ? 'initial' : 'hidden';\n    }\n    this.commandOrchestrator.executeCommand(command);\n  }\n  public render() {\n    const { prefixCls, className, value, commands, height, visiableDragbar, preview, fullscreen, previewOptions, textareaProps, maxHeight, minHeight, autoFocus, tabSize, onChange, hideToolbar, ...other } = this.props;\n    const cls = classnames(className, prefixCls, {\n      [`${prefixCls}-show-${this.state.preview}`]: this.state.preview,\n      [`${prefixCls}-fullscreen`]: this.state.fullscreen,\n    });\n    return (\n      <div className={cls} style={{ height: this.state.fullscreen ? '100%' : this.state.height }} {...other}>\n        {!hideToolbar && <Toolbar\n          active={{\n            fullscreen: this.state.fullscreen,\n            preview: this.state.preview,\n          }}\n          prefixCls={prefixCls} commands={commands}\n          onCommand={this.handleCommand}\n        />}\n        <div\n          className={`${prefixCls}-content`}\n          style={{ height: this.state.fullscreen ? 'calc(100% - 29px)' : (this.state.height as number) - 29 }}\n        >\n          {/(edit|live)/.test(this.state.preview as string) && (\n            <TextArea\n              ref={this.textarea}\n              tabSize={tabSize}\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              value={this.state.value}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onScroll={this.handleScroll}\n              onMouseOver={() => this.leftScroll = true}\n              onMouseLeave={() => this.leftScroll = false}\n              onChange={this.handleChange.bind(this)}\n            />\n          )}\n          <MarkdownPreview\n            {...previewOptions}\n            ref={this.preview}\n            onScroll={this.handleScroll}\n            className={`${prefixCls}-preview`}\n          />\n          {visiableDragbar && this.state.preview !== 'preview' && !this.state.fullscreen && (\n            <DragBar\n              prefixCls={prefixCls}\n              height={this.state.height as number}\n              maxHeight={maxHeight!}\n              minHeight={minHeight!}\n              onChange={(newHeight) => {\n                this.setState({ height: newHeight });\n              }}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}