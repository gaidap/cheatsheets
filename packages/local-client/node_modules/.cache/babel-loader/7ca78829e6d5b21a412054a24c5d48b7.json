{"ast":null,"code":"var _jsxFileName = \"/home/pac/cheatsheets/packages/local-client/src/components/CellAdder.tsx\",\n    _s = $RefreshSig$();\n\nimport './CellAdder.css';\nimport { useActions } from '../hooks/use-actions';\nimport { CellType } from '../state';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellAdder = ({\n  previousCellId: nextCellId,\n  forceVisible\n}) => {\n  _s();\n\n  const {\n    insertCellAfter\n  } = useActions();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `cell-adder ${forceVisible && 'force-visible'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-rounded is-primary is-small\",\n        onClick: () => insertCellAfter(nextCellId, CellType.CODE),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon is-small\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-plus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-rounded is-primary is-small\",\n        onClick: () => insertCellAfter(nextCellId, CellType.MARKDOWN),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon is-small\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-plus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Markdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"divider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CellAdder, \"ain1WfJPsCStQGbSx2B93tc4GvE=\", false, function () {\n  return [useActions];\n});\n\n_c = CellAdder;\nexport default CellAdder;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellAdder\");","map":{"version":3,"sources":["/home/pac/cheatsheets/packages/local-client/src/components/CellAdder.tsx"],"names":["useActions","CellType","CellAdder","previousCellId","nextCellId","forceVisible","insertCellAfter","CODE","MARKDOWN"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,SAASA,UAAT,QAA2B,sBAA3B;AACA,SAASC,QAAT,QAAyB,UAAzB;;;AAOA,MAAMC,SAAiC,GAAG,CAAC;AAAEC,EAAAA,cAAc,EAAEC,UAAlB;AAA8BC,EAAAA;AAA9B,CAAD,KAAkD;AAAA;;AAC1F,QAAM;AAAEC,IAAAA;AAAF,MAAsBN,UAAU,EAAtC;AACA,sBACE;AAAK,IAAA,SAAS,EAAG,cAAaK,YAAY,IAAI,eAAgB,EAA9D;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,uCAAlB;AAA0D,QAAA,OAAO,EAAE,MAAMC,eAAe,CAACF,UAAD,EAAaH,QAAQ,CAACM,IAAtB,CAAxF;AAAA,gCACE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,iCACE;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,SAAS,EAAC,uCAAlB;AAA0D,QAAA,OAAO,EAAE,MAAMD,eAAe,CAACF,UAAD,EAAaH,QAAQ,CAACO,QAAtB,CAAxF;AAAA,gCACE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,iCACE;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CArBD;;GAAMN,S;UACwBF,U;;;KADxBE,S;AAuBN,eAAeA,SAAf","sourcesContent":["import './CellAdder.css';\nimport { useActions } from '../hooks/use-actions';\nimport { CellType } from '../state';\n\ninterface AddCellProps {\n  previousCellId: string | null;\n  forceVisible?: boolean;\n}\n\nconst CellAdder: React.FC<AddCellProps> = ({ previousCellId: nextCellId, forceVisible }) => {\n  const { insertCellAfter } = useActions();\n  return (\n    <div className={`cell-adder ${forceVisible && 'force-visible'}`}>\n      <div className='add-buttons'>\n        <button className='button is-rounded is-primary is-small' onClick={() => insertCellAfter(nextCellId, CellType.CODE)}>\n          <span className='icon is-small'>\n            <i className='fas fa-plus' />\n          </span>\n          <span>Code</span>\n        </button>\n        <button className='button is-rounded is-primary is-small' onClick={() => insertCellAfter(nextCellId, CellType.MARKDOWN)}>\n          <span className='icon is-small'>\n            <i className='fas fa-plus' />\n          </span>\n          <span>Markdown</span>\n        </button>\n      </div>\n      <div className='divider'></div>\n    </div>\n  );\n};\n\nexport default CellAdder;\n"]},"metadata":{},"sourceType":"module"}