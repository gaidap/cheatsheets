{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport React, { Component } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markup';\nimport ReactMarkdown, { ReactMarkdownProps } from 'react-markdown';\nimport allowNode from './allowNode';\nimport { loadLang } from './langs';\nimport \"./styles/markdown.css\";\nimport \"./styles/markdowncolor.css\";\n\nvar MarkdownPreview = /*#__PURE__*/function (_Component) {\n  _inherits(MarkdownPreview, _Component);\n\n  var _super = _createSuper(MarkdownPreview);\n\n  function MarkdownPreview(props) {\n    var _this;\n\n    _classCallCheck(this, MarkdownPreview);\n\n    _this = _super.call(this, props);\n    _this.mdp = /*#__PURE__*/React.createRef();\n    _this.loadedLang = ['markup'];\n    _this.state = {\n      value: '' || props.source\n    };\n    return _this;\n  }\n\n  _createClass(MarkdownPreview, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.highlight();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (this.props.source !== prevProps.source) {\n        this.setState({\n          value: this.props.source\n        }, function () {\n          _this2.highlight();\n        });\n      }\n    }\n  }, {\n    key: \"renderHTML\",\n    value: function renderHTML(mdStr) {\n      var _this3 = this;\n\n      this.setState({\n        value: mdStr\n      }, function () {\n        _this3.highlight();\n      });\n    }\n  }, {\n    key: \"highlight\",\n    value: function () {\n      var _highlight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var codes, _iterator, _step, value, tag, lang;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.mdp.current) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                codes = this.mdp.current.getElementsByTagName('code');\n                _iterator = _createForOfIteratorHelper(codes);\n                _context.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 24;\n                  break;\n                }\n\n                value = _step.value;\n                tag = value.parentNode;\n\n                if (!(tag && tag.tagName === 'PRE' && /^language-/.test(value.className.trim()))) {\n                  _context.next = 22;\n                  break;\n                }\n\n                lang = value.className.trim().replace(/^language-/, '');\n                _context.prev = 11;\n\n                if (this.loadedLang.includes(lang)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                this.loadedLang.push(lang);\n                _context.next = 16;\n                return loadLang(lang);\n\n              case 16:\n                _context.next = 18;\n                return Prism.highlightElement(value);\n\n              case 18:\n                _context.next = 22;\n                break;\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](11);\n\n              case 22:\n                _context.next = 6;\n                break;\n\n              case 24:\n                _context.next = 29;\n                break;\n\n              case 26:\n                _context.prev = 26;\n                _context.t1 = _context[\"catch\"](4);\n\n                _iterator.e(_context.t1);\n\n              case 29:\n                _context.prev = 29;\n\n                _iterator.f();\n\n                return _context.finish(29);\n\n              case 32:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 26, 29, 32], [11, 20]]);\n      }));\n\n      function highlight() {\n        return _highlight.apply(this, arguments);\n      }\n\n      return highlight;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          style = _this$props.style,\n          onScroll = _this$props.onScroll,\n          onMouseOver = _this$props.onMouseOver,\n          other = _objectWithoutProperties(_this$props, [\"className\", \"style\", \"onScroll\", \"onMouseOver\"]);\n\n      var cls = \"wmde-markdown wmde-markdown-color \".concat(className || '');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.mdp,\n        onScroll: onScroll,\n        style: style,\n        onMouseOver: onMouseOver,\n        className: cls\n      }, /*#__PURE__*/React.createElement(ReactMarkdown, _extends({\n        escapeHtml: false,\n        allowNode: allowNode\n      }, other, {\n        source: this.state.value\n      })));\n    }\n  }]);\n\n  return MarkdownPreview;\n}(Component);\n\nMarkdownPreview.defaultProps = {\n  renderers: {}\n};\nexport { MarkdownPreview as default };","map":{"version":3,"sources":["../../src/index.tsx"],"names":["MarkdownPreview","Component","mdp","React","loadedLang","defaultProps","renderers","value","props","source","prevProps","mdStr","current","codes","tag","parentNode","lang","loadLang","Prism","className","style","onScroll","onMouseOver","other","cls","allowNode"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markup';\nimport ReactMarkdown, { ReactMarkdownProps } from 'react-markdown';\nimport allowNode from './allowNode';\nimport { loadLang } from './langs';\nimport './styles/markdown.less';\nimport './styles/markdowncolor.less';\n\nexport type {\n  ReactMarkdownProps,\n  MarkdownAbstractSyntaxTree,\n  NodeType,\n  RemarkParseOptions,\n  Position,\n  Point,\n  AlignType,\n  ReferenceType,\n  LinkTargetResolver,\n  Renderers,\n} from 'react-markdown';\n\nexport interface IMarkdownPreviewProps extends Omit<ReactMarkdownProps, 'className'> {\n  prefixCls?: string;\n  className?: string;\n  style?: React.CSSProperties;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  onMouseOver?: (e: React.MouseEvent<HTMLDivElement>) => void;\n}\n\nexport interface IMarkdownPreviewState {\n  value?: string;\n}\n\nexport default class MarkdownPreview extends Component<IMarkdownPreviewProps, IMarkdownPreviewState> {\n  public mdp = React.createRef<HTMLDivElement>();\n  public loadedLang: string[] = ['markup'];\n  public static defaultProps: IMarkdownPreviewProps = {\n    renderers: {},\n  }\n  public constructor(props: IMarkdownPreviewProps) {\n    super(props);\n    this.state = {\n      value: '' || props.source,\n    };\n  }\n  componentDidMount() {\n    this.highlight();\n  }\n  componentDidUpdate(prevProps: IMarkdownPreviewProps) {\n    if (this.props.source !== prevProps.source) {\n      this.setState({ value: this.props.source }, () => {\n        this.highlight();\n      });\n    }\n  }\n  public renderHTML(mdStr?: string) {\n    this.setState({ value: mdStr }, () => {\n      this.highlight();\n    });\n  }\n  public async highlight() {\n    if (!this.mdp.current) return;\n    const codes = this.mdp.current.getElementsByTagName('code') as unknown as HTMLElement[];\n    for (const value of codes) {\n      const tag = value.parentNode as HTMLElement;\n      if (tag && tag.tagName === 'PRE' && /^language-/.test(value.className.trim())) {\n        const lang = value.className.trim().replace(/^language-/, '');\n        try {\n          if (!this.loadedLang.includes(lang as never)) {\n            this.loadedLang.push(lang);\n            await loadLang(lang);\n          }\n          await Prism.highlightElement(value);\n        } catch (error) { }\n      }\n    }\n  }\n  render() {\n    const { className, style, onScroll, onMouseOver, ...other } = this.props;\n    const cls = `wmde-markdown wmde-markdown-color ${className || ''}`;\n    return (\n      <div ref={this.mdp} onScroll={onScroll} style={style} onMouseOver={onMouseOver} className={cls} >\n        <ReactMarkdown escapeHtml={false} allowNode={allowNode} {...other} source={this.state.value} />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}