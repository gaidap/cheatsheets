{"version":3,"sources":["../../src/index.tsx"],"names":["MarkdownPreview","props","mdp","React","createRef","loadedLang","state","value","source","highlight","prevProps","setState","mdStr","current","codes","getElementsByTagName","tag","parentNode","tagName","test","className","trim","lang","replace","includes","push","Prism","highlightElement","style","onScroll","onMouseOver","other","cls","allowNode","Component","defaultProps","renderers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;IA6BqBA,e;;;;;AAMnB,2BAAmBC,KAAnB,EAAiD;AAAA;;AAAA;AAC/C,8BAAMA,KAAN;AAD+C,UAL1CC,GAK0C,gBALpCC,eAAMC,SAAN,EAKoC;AAAA,UAJ1CC,UAI0C,GAJnB,CAAC,QAAD,CAImB;AAE/C,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,MAAMN,KAAK,CAACO;AADR,KAAb;AAF+C;AAKhD;;;;wCACmB;AAClB,WAAKC,SAAL;AACD;;;uCACkBC,S,EAAkC;AAAA;;AACnD,UAAI,KAAKT,KAAL,CAAWO,MAAX,KAAsBE,SAAS,CAACF,MAApC,EAA4C;AAC1C,aAAKG,QAAL,CAAc;AAAEJ,UAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO;AAApB,SAAd,EAA4C,YAAM;AAChD,UAAA,MAAI,CAACC,SAAL;AACD,SAFD;AAGD;AACF;;;+BACiBG,K,EAAgB;AAAA;;AAChC,WAAKD,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAEK;AAAT,OAAd,EAAgC,YAAM;AACpC,QAAA,MAAI,CAACH,SAAL;AACD,OAFD;AAGD;;;;;;;;;;;oBAEM,KAAKP,GAAL,CAASW,O;;;;;;;;AACRC,gBAAAA,K,GAAQ,KAAKZ,GAAL,CAASW,OAAT,CAAiBE,oBAAjB,CAAsC,MAAtC,C;qEACMD,K;;;;;;;;;;;AAATP,gBAAAA,K;AACHS,gBAAAA,G,GAAMT,KAAK,CAACU,U;;sBACdD,GAAG,IAAIA,GAAG,CAACE,OAAJ,KAAgB,KAAvB,IAAgC,aAAaC,IAAb,CAAkBZ,KAAK,CAACa,SAAN,CAAgBC,IAAhB,EAAlB,C;;;;;AAC5BC,gBAAAA,I,GAAOf,KAAK,CAACa,SAAN,CAAgBC,IAAhB,GAAuBE,OAAvB,CAA+B,YAA/B,EAA6C,EAA7C,C;;;oBAEN,KAAKlB,UAAL,CAAgBmB,QAAhB,CAAyBF,IAAzB,C;;;;;AACH,qBAAKjB,UAAL,CAAgBoB,IAAhB,CAAqBH,IAArB;;uBACM,qBAASA,IAAT,C;;;;uBAEFI,iBAAMC,gBAAN,CAAuBpB,KAAvB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAKL;AAAA,wBACuD,KAAKN,KAD5D;AAAA,UACCmB,SADD,eACCA,SADD;AAAA,UACYQ,KADZ,eACYA,KADZ;AAAA,UACmBC,QADnB,eACmBA,QADnB;AAAA,UAC6BC,WAD7B,eAC6BA,WAD7B;AAAA,UAC6CC,KAD7C;AAEP,UAAMC,GAAG,+CAAwCZ,SAAS,IAAI,EAArD,CAAT;AACA,0BACE;AAAK,QAAA,GAAG,EAAE,KAAKlB,GAAf;AAAoB,QAAA,QAAQ,EAAE2B,QAA9B;AAAwC,QAAA,KAAK,EAAED,KAA/C;AAAsD,QAAA,WAAW,EAAEE,WAAnE;AAAgF,QAAA,SAAS,EAAEE;AAA3F,sBACE,6BAAC,sBAAD;AAAe,QAAA,UAAU,EAAE,KAA3B;AAAkC,QAAA,SAAS,EAAEC;AAA7C,SAA4DF,KAA5D;AAAmE,QAAA,MAAM,EAAE,KAAKzB,KAAL,CAAWC;AAAtF,SADF,CADF;AAKD;;;EApD0C2B,gB;;;AAAxBlC,e,CAGLmC,Y,GAAsC;AAClDC,EAAAA,SAAS,EAAE;AADuC,C","sourcesContent":["import React, { Component } from 'react';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-markup';\nimport ReactMarkdown, { ReactMarkdownProps } from 'react-markdown';\nimport allowNode from './allowNode';\nimport { loadLang } from './langs';\nimport './styles/markdown.less';\nimport './styles/markdowncolor.less';\n\nexport type {\n  ReactMarkdownProps,\n  MarkdownAbstractSyntaxTree,\n  NodeType,\n  RemarkParseOptions,\n  Position,\n  Point,\n  AlignType,\n  ReferenceType,\n  LinkTargetResolver,\n  Renderers,\n} from 'react-markdown';\n\nexport interface IMarkdownPreviewProps extends Omit<ReactMarkdownProps, 'className'> {\n  prefixCls?: string;\n  className?: string;\n  style?: React.CSSProperties;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  onMouseOver?: (e: React.MouseEvent<HTMLDivElement>) => void;\n}\n\nexport interface IMarkdownPreviewState {\n  value?: string;\n}\n\nexport default class MarkdownPreview extends Component<IMarkdownPreviewProps, IMarkdownPreviewState> {\n  public mdp = React.createRef<HTMLDivElement>();\n  public loadedLang: string[] = ['markup'];\n  public static defaultProps: IMarkdownPreviewProps = {\n    renderers: {},\n  }\n  public constructor(props: IMarkdownPreviewProps) {\n    super(props);\n    this.state = {\n      value: '' || props.source,\n    };\n  }\n  componentDidMount() {\n    this.highlight();\n  }\n  componentDidUpdate(prevProps: IMarkdownPreviewProps) {\n    if (this.props.source !== prevProps.source) {\n      this.setState({ value: this.props.source }, () => {\n        this.highlight();\n      });\n    }\n  }\n  public renderHTML(mdStr?: string) {\n    this.setState({ value: mdStr }, () => {\n      this.highlight();\n    });\n  }\n  public async highlight() {\n    if (!this.mdp.current) return;\n    const codes = this.mdp.current.getElementsByTagName('code') as unknown as HTMLElement[];\n    for (const value of codes) {\n      const tag = value.parentNode as HTMLElement;\n      if (tag && tag.tagName === 'PRE' && /^language-/.test(value.className.trim())) {\n        const lang = value.className.trim().replace(/^language-/, '');\n        try {\n          if (!this.loadedLang.includes(lang as never)) {\n            this.loadedLang.push(lang);\n            await loadLang(lang);\n          }\n          await Prism.highlightElement(value);\n        } catch (error) { }\n      }\n    }\n  }\n  render() {\n    const { className, style, onScroll, onMouseOver, ...other } = this.props;\n    const cls = `wmde-markdown wmde-markdown-color ${className || ''}`;\n    return (\n      <div ref={this.mdp} onScroll={onScroll} style={style} onMouseOver={onMouseOver} className={cls} >\n        <ReactMarkdown escapeHtml={false} allowNode={allowNode} {...other} source={this.state.value} />\n      </div>\n    );\n  }\n}"]}