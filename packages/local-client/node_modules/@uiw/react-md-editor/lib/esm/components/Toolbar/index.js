import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import classnames from 'classnames';
import "./index.css";
export default function Toolbar() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var prefixCls = props.prefixCls,
      _props$commands = props.commands,
      commands = _props$commands === void 0 ? [] : _props$commands,
      active = props.active;

  function handleClick(command) {
    var onCommand = props.onCommand;
    onCommand && onCommand(command);
  }

  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-toolbar")
  }, /*#__PURE__*/React.createElement("ul", null, commands.map(function (item, idx) {
    if (item.keyCommand === 'divider') {
      return /*#__PURE__*/React.createElement("li", _extends({
        key: idx
      }, item.liProps, {
        className: "".concat(prefixCls, "-toolbar-divider")
      }));
    }

    var activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]);
    return /*#__PURE__*/React.createElement("li", _extends({
      key: idx
    }, item.liProps, {
      className: classnames({
        active: activeBtn
      })
    }), !item.buttonProps && item.icon, item.buttonProps && /*#__PURE__*/React.createElement('button', _objectSpread(_objectSpread({
      type: 'button',
      disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),
      "data-name": item.name
    }, item.buttonProps), {}, {
      onClick: function onClick() {
        return handleClick(item);
      }
    }), item.icon));
  })));
}
; 
//# sourceMappingURL=index.js.map