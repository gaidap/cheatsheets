{"version":3,"sources":["../../../../src/components/Toolbar/index.tsx"],"names":["Toolbar","props","prefixCls","commands","active","handleClick","command","onCommand","map","item","idx","keyCommand","liProps","activeBtn","value","buttonProps","icon","React","createElement","type","disabled","preview","test","name","onClick"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAae,SAASA,OAAT,GAA4C;AAAA,MAA3BC,KAA2B,uEAAJ,EAAI;AAAA,MACjDC,SADiD,GACZD,KADY,CACjDC,SADiD;AAAA,wBACZD,KADY,CACtCE,QADsC;AAAA,MACtCA,QADsC,gCAC3B,EAD2B;AAAA,MACvBC,MADuB,GACZH,KADY,CACvBG,MADuB;;AAEzD,WAASC,WAAT,CAAqBC,OAArB,EAAwC;AAAA,QAC9BC,SAD8B,GAChBN,KADgB,CAC9BM,SAD8B;AAEtCA,IAAAA,SAAS,IAAIA,SAAS,CAACD,OAAD,CAAtB;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,YAAKJ,SAAL;AAAd,kBACE,yCACGC,QAAQ,CAACK,GAAT,CAAa,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC3B,QAAID,IAAI,CAACE,UAAL,KAAoB,SAAxB,EAAmC;AACjC,0BAAO;AAAI,QAAA,GAAG,EAAED;AAAT,SAAkBD,IAAI,CAACG,OAAvB;AAAgC,QAAA,SAAS,YAAKV,SAAL;AAAzC,SAAP;AACD;;AACD,QAAMW,SAAS,GAAGT,MAAM,KAAKK,IAAI,CAACK,KAAL,GAAaV,MAAM,CAACK,IAAI,CAACE,UAAN,CAAN,IAA2BP,MAAM,CAACK,IAAI,CAACE,UAAN,CAAN,KAA4BF,IAAI,CAACK,KAAzE,GAAiFV,MAAM,CAACK,IAAI,CAACE,UAAN,CAA5F,CAAxB;AACA,wBACE;AAAI,MAAA,GAAG,EAAED;AAAT,OAAkBD,IAAI,CAACG,OAAvB;AAAgC,MAAA,SAAS,EAAE,yBAAW;AAAER,QAAAA,MAAM,EAAES;AAAV,OAAX;AAA3C,QACG,CAACJ,IAAI,CAACM,WAAN,IAAqBN,IAAI,CAACO,IAD7B,EAEGP,IAAI,CAACM,WAAL,iBAAoBE,eAAMC,aAAN,CAAoB,QAApB;AACnBC,MAAAA,IAAI,EAAE,QADa;AAEnBC,MAAAA,QAAQ,EAAEhB,MAAM,IAAIA,MAAM,CAACiB,OAAjB,IAA4BjB,MAAM,CAACiB,OAAP,KAAmB,SAA/C,IAA4D,CAAC,uBAAuBC,IAAvB,CAA4Bb,IAAI,CAACE,UAAjC,CAFpD;AAGnB,mBAAaF,IAAI,CAACc;AAHC,OAGQd,IAAI,CAACM,WAHb;AAInBS,MAAAA,OAAO,EAAE;AAAA,eAAOnB,WAAW,CAACI,IAAD,CAAlB;AAAA;AAJU,QAKlBA,IAAI,CAACO,IALa,CAFvB,CADF;AAWD,GAhBA,CADH,CADF,CADF;AAuBD;;AAAA","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { IProps } from '../../utils';\nimport { ICommand } from '../../commands';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  onCommand?: (command: ICommand) => void;\n  commands?: ICommand[];\n  active?: {\n    [key: string]: any,\n  },\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls, commands = [], active } = props;\n  function handleClick(command: ICommand) {\n    const { onCommand } = props;\n    onCommand && onCommand(command);\n  }\n  return (\n    <div className={`${prefixCls}-toolbar`}>\n      <ul>\n        {commands.map((item, idx) => {\n          if (item.keyCommand === 'divider') {\n            return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />\n          }\n          const activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]); \n          return (\n            <li key={idx} {...item.liProps} className={classnames({ active: activeBtn })}>\n              {!item.buttonProps && item.icon}\n              {item.buttonProps && React.createElement('button', {\n                type: 'button',\n                disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),\n                \"data-name\": item.name, ...item.buttonProps,\n                onClick: () =>  handleClick(item)\n              }, item.icon)}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n"]}